# Multi-stage build for smaller final image
FROM python:3.11-slim AS builder

# Install build dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment and install Python dependencies
WORKDIR /app
COPY requirements-prod.txt .
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements-prod.txt

# Final stage - optimized runtime image
FROM python:3.11-slim

# Install runtime dependencies in a single layer with cleanup
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN groupadd -r vidaud && useradd -r -g vidaud -u 1000 vidaud

# Set working directory
WORKDIR /app

# Copy only essential application files
COPY --chown=vidaud:vidaud src/ ./src/
COPY --chown=vidaud:vidaud main.py ./

# Create directories for volumes
RUN mkdir -p /input /output && chown -R vidaud:vidaud /input /output

# Switch to non-root user
USER vidaud

# Health check endpoint - optimized with lightweight check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose health endpoint port
EXPOSE 8080

# Run the application
CMD ["python", "main.py"]
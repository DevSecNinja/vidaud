name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Uses .flake8 config file automatically
        python -m flake8 src/ tests/

    - name: Check formatting with black
      run: |
        # Uses pyproject.toml [tool.black] config automatically
        python -m black --check src/ tests/

    - name: Security check with bandit
      run: |
        # Uses pyproject.toml [tool.bandit] config automatically
        python -m bandit -r src/

    - name: Bandit Security Scan
      uses: shundor/bandit-action@v1
      with: 
          path: "src/"
          level: low
          confidence: low
          exit_zero: true   

    - name: Security check with safety
      run: |
        python -m safety check

    - name: Run unit tests
      run: |
        # Uses pyproject.toml [tool.pytest.ini_options] config automatically
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not integration"

    - name: Run integration tests
      run: |
        # Integration tests that download real video samples
        python -m pytest tests/ -v -m integration
      continue-on-error: true  # Don't fail build if network issues occur

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'  # Only upload once
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Basic smoke test of the Docker image
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} python -c "import src.config; print('Docker image OK')"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        body: |
          ## Docker Image
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
          
          ## Quick Start
          
          ```bash
          # Using Docker
          docker run -d \
            --name vidaud \
            -v /path/to/videos:/input:ro \
            -v /path/to/audio:/output \
            -p 8080:8080 \
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          
          # Using Docker Compose
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          docker-compose up -d
          ```
          
          ## Health Check
          
          ```bash
          curl http://localhost:8080/health
          ```
        draft: false
        prerelease: false

name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COVERAGE_PYTHON_VERSION: "3.12" # Python version to upload coverage from

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          # Uses pyproject.toml [tool.pytest.ini_options] config automatically
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not integration"

      - name: Run integration tests
        run: |
          # Integration tests that download real video samples
          python -m pytest tests/ -v -m integration
        continue-on-error: true # Don't fail build if network issues occur

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests

  lint-and-security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.6"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Uses .flake8 config file automatically
          python -m flake8 src/ tests/

      - name: Check formatting with black
        run: |
          # Uses pyproject.toml [tool.black] config automatically
          python -m black --check src/ tests/

      - name: Security check with bandit
        uses: shundor/python-bandit-scan@v1.0
        with:
          path: "src/"
          level: low
          confidence: low
          exit_zero: true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, lint-and-security-scan]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase image name
        id: image_name
        run: echo "value=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.value }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}},enable=${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=auto
          labels: |
            org.opencontainers.image.authors=DevSecNinja
            org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}
            org.opencontainers.image.description=A Docker-based application that automatically converts video files to audio formats (MP3/FLAC) while preserving metadata and folder structure for Plex compatibility.
            org.opencontainers.image.documentation=https://github.com/DevSecNinja/vidaud/blob/main/README.md
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/DevSecNinja/vidaud
            org.opencontainers.image.title=vidaud - Video to Audio Converter
            org.opencontainers.image.url=https://github.com/DevSecNinja/vidaud
            org.opencontainers.image.vendor=DevSecNinja
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: 'linux/amd64,linux/arm64'
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Basic smoke test of the Docker image using the first tag
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          CONTAINER_NAME="test-container-${{ github.run_id }}-${{ github.run_attempt }}"

          # Test basic container functionality
          docker run --rm "${IMAGE_TAG}" python -c "import src.config; print('Docker image OK')"

          # Test that FFmpeg is available (since it's a key dependency)
          docker run --rm "${IMAGE_TAG}" ffmpeg -version

          # Test that the health endpoint works (if you want to test the web server)
          docker run -d --name "${CONTAINER_NAME}" -p 8080:8080 "${IMAGE_TAG}"
          sleep 5
          curl -f http://localhost:8080/health || exit 1
          docker stop "${CONTAINER_NAME}"
          docker rm "${CONTAINER_NAME}"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          body: |
            ## Docker Image

            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```

            ## Quick Start

            ```bash
            # Using Docker
            docker run -d \
              --name vidaud \
              -v /path/to/videos:/input:ro \
              -v /path/to/audio:/output \
              -p 8080:8080 \
              ghcr.io/${{ github.repository }}:${{ github.ref_name }}

            # Using Docker Compose
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
            docker-compose up -d
            ```

            ## Health Check

            ```bash
            curl http://localhost:8080/health
            ```
          draft: false
          prerelease: false
